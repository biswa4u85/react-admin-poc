{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useIntl } from 'react-intl';\nexport const getBreakPointsValue = (valueSet, breakpoint) => {\n  if (typeof valueSet === 'number') return valueSet;\n\n  switch (breakpoint) {\n    case 'xs':\n      return valueSet.xs;\n\n    case 'sm':\n      return valueSet.sm || valueSet.xs;\n\n    case 'md':\n      return valueSet.md || valueSet.sm || valueSet.xs;\n\n    case 'lg':\n      return valueSet.lg || valueSet.md || valueSet.sm || valueSet.xs;\n\n    default:\n      return valueSet.xl || valueSet.lg || valueSet.md || valueSet.sm || valueSet.xs;\n  }\n};\nexport const getFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  let k = 1024,\n      dm = 2,\n      sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n      i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\nexport const multiPropsFilter = (products, filters, stringKey = 'title') => {\n  const filterKeys = Object.keys(filters);\n  return products.filter(product => {\n    return filterKeys.every(key => {\n      if (!filters[key].length) return true; // Loops again if product[key] is an array (for material attribute).\n\n      if (Array.isArray(product[key])) {\n        return product[key].some(keyEle => filters[key].includes(keyEle));\n      }\n\n      console.log('key', key, filters[key], product[key]);\n\n      if (key === stringKey) {\n        return product[key].toLowerCase().includes(filters[key].toLowerCase());\n      }\n\n      return filters[key].includes(product[key]);\n    });\n  });\n}; // 'intl' service singleton reference\n\nlet intl;\nexport function IntlGlobalProvider({\n  children\n}) {\n  _s();\n\n  intl = useIntl(); // Keep the 'intl' service reference\n\n  return children;\n}\n\n_s(IntlGlobalProvider, \"d38Q5NGBaKaP9q6PniZUmB+0U94=\", false, function () {\n  return [useIntl];\n});\n\n_c = IntlGlobalProvider;\nexport const appIntl = () => {\n  return intl;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"IntlGlobalProvider\");","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/its-Disco/src/@crema/utility/helper/Utils.js"],"names":["useIntl","getBreakPointsValue","valueSet","breakpoint","xs","sm","md","lg","xl","getFileSize","bytes","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","multiPropsFilter","products","filters","stringKey","filterKeys","Object","keys","filter","product","every","key","length","Array","isArray","some","keyEle","includes","console","toLowerCase","intl","IntlGlobalProvider","children","appIntl"],"mappings":"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","sourcesContent":["import {useIntl} from 'react-intl';\r\n\r\nexport const getBreakPointsValue = (valueSet, breakpoint) => {\r\n  if (typeof valueSet === 'number') return valueSet;\r\n  switch (breakpoint) {\r\n    case 'xs':\r\n      return valueSet.xs;\r\n    case 'sm':\r\n      return valueSet.sm || valueSet.xs;\r\n    case 'md':\r\n      return valueSet.md || valueSet.sm || valueSet.xs;\r\n    case 'lg':\r\n      return valueSet.lg || valueSet.md || valueSet.sm || valueSet.xs;\r\n    default:\r\n      return (\r\n        valueSet.xl || valueSet.lg || valueSet.md || valueSet.sm || valueSet.xs\r\n      );\r\n  }\r\n};\r\n\r\nexport const getFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  let k = 1024,\r\n    dm = 2,\r\n    sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\r\n    i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n};\r\n\r\nexport const multiPropsFilter = (products, filters, stringKey = 'title') => {\r\n  const filterKeys = Object.keys(filters);\r\n  return products.filter((product) => {\r\n    return filterKeys.every((key) => {\r\n      if (!filters[key].length) return true;\r\n      // Loops again if product[key] is an array (for material attribute).\r\n      if (Array.isArray(product[key])) {\r\n        return product[key].some((keyEle) => filters[key].includes(keyEle));\r\n      }\r\n      console.log('key', key, filters[key], product[key]);\r\n      if (key === stringKey) {\r\n        return product[key].toLowerCase().includes(filters[key].toLowerCase());\r\n      }\r\n      return filters[key].includes(product[key]);\r\n    });\r\n  });\r\n};\r\n\r\n// 'intl' service singleton reference\r\nlet intl;\r\n\r\nexport function IntlGlobalProvider({children}) {\r\n  intl = useIntl();\r\n  // Keep the 'intl' service reference\r\n  return children;\r\n}\r\n\r\nexport const appIntl = () => {\r\n  return intl;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}