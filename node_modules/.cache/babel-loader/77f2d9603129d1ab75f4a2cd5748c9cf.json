{"ast":null,"code":"var _jsxFileName = \"/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/core/AppGrid/GridView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport PropTypes from 'prop-types';\nimport AppAnimateGroup from '../AppAnimateGroup';\nimport './index.style.less';\nimport { Grid } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useBreakpoint\n} = Grid;\n\nconst getEmptyContainer = ListEmptyComponent => {\n  if (ListEmptyComponent) return /*#__PURE__*/React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : /*#__PURE__*/_jsxDEV(ListEmptyComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this);\n  return null;\n};\n\nconst getFooterContainer = ListFooterComponent => {\n  if (ListFooterComponent) return /*#__PURE__*/React.isValidElement(ListFooterComponent) ? ListFooterComponent : /*#__PURE__*/_jsxDEV(ListFooterComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n  return null;\n};\n\nconst GridView = ({\n  column,\n  responsive,\n  itemPadding,\n  renderItem,\n  onEndReached,\n  data,\n  containerStyle,\n  border,\n  ListFooterComponent,\n  ListEmptyComponent,\n  ...rest\n}) => {\n  _s();\n\n  const [displayColumn, setColumn] = useState(column);\n  const width = useBreakpoint();\n\n  if (!onEndReached) {\n    onEndReached = () => {};\n  }\n\n  useEffect(() => {\n    setColumn(column);\n  }, [column]);\n  useEffect(() => {\n    const getColumnCount = () => {\n      if (responsive) {\n        if (width.xxl) {\n          return responsive.xxl || responsive.xl || responsive.lg || responsive.md || responsive.sm || responsive.xs || column;\n        } else if (width.xl) {\n          return responsive.xl || responsive.lg || responsive.md || responsive.sm || responsive.xs || column;\n        } else if (width.lg) {\n          return responsive.lg || responsive.md || responsive.sm || responsive.xs || column;\n        } else if (width.md) {\n          return responsive.md || responsive.sm || responsive.xs || column;\n        } else if (width.sm) {\n          return responsive.sm || responsive.xs || column;\n        } else if (width.xs) {\n          return responsive.xs || column;\n        }\n      } else {\n        return column;\n      }\n    };\n\n    setColumn(getColumnCount());\n  }, [width, column, responsive]);\n  let style = containerStyle;\n\n  if (border) {\n    style = { ...style,\n      border: `1px solid @grey-3`,\n      backgroundColor: '@component-background',\n      borderRadius: 4,\n      overflow: 'hidden'\n    };\n  }\n\n  useBottomScrollListener(onEndReached, 200);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(AppAnimateGroup, {\n      animateStyle: {\n        marginLeft: -itemPadding,\n        marginRight: -itemPadding,\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        height: 'auto',\n        ...style\n      },\n      ...rest,\n      children: data.length > 0 ? data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-column-count\",\n        style: {\n          maxWidth: `${100 / displayColumn}%`,\n          flexBasis: `${100 / displayColumn}%`,\n          padding: itemPadding\n        },\n        children: renderItem(item, index)\n      }, 'grid-' + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), data.length === 0 ? getEmptyContainer(ListEmptyComponent) : null, getFooterContainer(ListFooterComponent)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GridView, \"pWyIT22OvWYGp08OqyanLQYbpd8=\", false, function () {\n  return [useBreakpoint, useBottomScrollListener];\n});\n\n_c = GridView;\nexport default GridView;\nGridView.propTypes = {\n  border: PropTypes.bool,\n  column: PropTypes.number,\n  containerStyle: PropTypes.object,\n  ListEmptyComponent: PropTypes.node,\n  ListFooterComponent: PropTypes.node,\n  data: PropTypes.array.isRequired,\n  onEndReached: PropTypes.func,\n  width: PropTypes.number,\n  responsive: PropTypes.object,\n  itemPadding: PropTypes.number,\n  renderItem: PropTypes.func\n};\nGridView.defaultProps = {\n  border: false,\n  data: [],\n  column: 3,\n  itemPadding: 12 // responsive: {\n  //   xs: 1,\n  //   sm: 2,\n  //   md: 2,\n  //   lg: 4,\n  //   xl: 4,\n  //   xxl: 4,\n  // },\n\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"GridView\");","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/core/AppGrid/GridView.js"],"names":["React","useEffect","useState","useBottomScrollListener","PropTypes","AppAnimateGroup","Grid","useBreakpoint","getEmptyContainer","ListEmptyComponent","isValidElement","getFooterContainer","ListFooterComponent","GridView","column","responsive","itemPadding","renderItem","onEndReached","data","containerStyle","border","rest","displayColumn","setColumn","width","getColumnCount","xxl","xl","lg","md","sm","xs","style","backgroundColor","borderRadius","overflow","marginLeft","marginRight","flexDirection","flexWrap","height","length","map","item","index","maxWidth","flexBasis","padding","propTypes","bool","number","object","node","array","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useBottomScrollListener} from 'react-bottom-scroll-listener';\r\nimport PropTypes from 'prop-types';\r\nimport AppAnimateGroup from '../AppAnimateGroup';\r\nimport './index.style.less';\r\nimport {Grid} from 'antd';\r\nconst {useBreakpoint} = Grid;\r\nconst getEmptyContainer = (ListEmptyComponent) => {\r\n  if (ListEmptyComponent)\r\n    return React.isValidElement(ListEmptyComponent) ? (\r\n      ListEmptyComponent\r\n    ) : (\r\n      <ListEmptyComponent />\r\n    );\r\n  return null;\r\n};\r\n\r\nconst getFooterContainer = (ListFooterComponent) => {\r\n  if (ListFooterComponent)\r\n    return React.isValidElement(ListFooterComponent) ? (\r\n      ListFooterComponent\r\n    ) : (\r\n      <ListFooterComponent />\r\n    );\r\n  return null;\r\n};\r\n\r\nconst GridView = ({\r\n  column,\r\n  responsive,\r\n  itemPadding,\r\n  renderItem,\r\n  onEndReached,\r\n  data,\r\n  containerStyle,\r\n  border,\r\n  ListFooterComponent,\r\n  ListEmptyComponent,\r\n  ...rest\r\n}) => {\r\n  const [displayColumn, setColumn] = useState(column);\r\n\r\n  const width = useBreakpoint();\r\n  if (!onEndReached) {\r\n    onEndReached = () => {};\r\n  }\r\n\r\n  useEffect(() => {\r\n    setColumn(column);\r\n  }, [column]);\r\n\r\n  useEffect(() => {\r\n    const getColumnCount = () => {\r\n      if (responsive) {\r\n        if (width.xxl) {\r\n          return (\r\n            responsive.xxl ||\r\n            responsive.xl ||\r\n            responsive.lg ||\r\n            responsive.md ||\r\n            responsive.sm ||\r\n            responsive.xs ||\r\n            column\r\n          );\r\n        } else if (width.xl) {\r\n          return (\r\n            responsive.xl ||\r\n            responsive.lg ||\r\n            responsive.md ||\r\n            responsive.sm ||\r\n            responsive.xs ||\r\n            column\r\n          );\r\n        } else if (width.lg) {\r\n          return (\r\n            responsive.lg ||\r\n            responsive.md ||\r\n            responsive.sm ||\r\n            responsive.xs ||\r\n            column\r\n          );\r\n        } else if (width.md) {\r\n          return responsive.md || responsive.sm || responsive.xs || column;\r\n        } else if (width.sm) {\r\n          return responsive.sm || responsive.xs || column;\r\n        } else if (width.xs) {\r\n          return responsive.xs || column;\r\n        }\r\n      } else {\r\n        return column;\r\n      }\r\n    };\r\n    setColumn(getColumnCount());\r\n  }, [width, column, responsive]);\r\n\r\n  let style = containerStyle;\r\n  if (border) {\r\n    style = {\r\n      ...style,\r\n      border: `1px solid @grey-3`,\r\n      backgroundColor: '@component-background',\r\n      borderRadius: 4,\r\n      overflow: 'hidden',\r\n    };\r\n  }\r\n  useBottomScrollListener(onEndReached, 200);\r\n  return (\r\n    <div className='grid-container'>\r\n      <AppAnimateGroup\r\n        animateStyle={{\r\n          marginLeft: -itemPadding,\r\n          marginRight: -itemPadding,\r\n          flexDirection: 'row',\r\n          flexWrap: 'wrap',\r\n          height: 'auto',\r\n          ...style,\r\n        }}\r\n        {...rest}>\r\n        {data.length > 0\r\n          ? data.map((item, index) => (\r\n              <div\r\n                key={'grid-' + index}\r\n                className='grid-column-count'\r\n                style={{\r\n                  maxWidth: `${100 / displayColumn}%`,\r\n                  flexBasis: `${100 / displayColumn}%`,\r\n                  padding: itemPadding,\r\n                }}>\r\n                {renderItem(item, index)}\r\n              </div>\r\n            ))\r\n          : null}\r\n      </AppAnimateGroup>\r\n      {data.length === 0 ? getEmptyContainer(ListEmptyComponent) : null}\r\n      {getFooterContainer(ListFooterComponent)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridView;\r\nGridView.propTypes = {\r\n  border: PropTypes.bool,\r\n  column: PropTypes.number,\r\n  containerStyle: PropTypes.object,\r\n  ListEmptyComponent: PropTypes.node,\r\n  ListFooterComponent: PropTypes.node,\r\n  data: PropTypes.array.isRequired,\r\n  onEndReached: PropTypes.func,\r\n\r\n  width: PropTypes.number,\r\n  responsive: PropTypes.object,\r\n  itemPadding: PropTypes.number,\r\n  renderItem: PropTypes.func,\r\n};\r\nGridView.defaultProps = {\r\n  border: false,\r\n  data: [],\r\n  column: 3,\r\n  itemPadding: 12,\r\n  // responsive: {\r\n  //   xs: 1,\r\n  //   sm: 2,\r\n  //   md: 2,\r\n  //   lg: 4,\r\n  //   xl: 4,\r\n  //   xxl: 4,\r\n  // },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}