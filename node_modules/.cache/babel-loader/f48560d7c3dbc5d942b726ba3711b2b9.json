{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { apiPostCall } from '../utility/site-apis';\nimport { message } from 'antd';\nconst initialState = {\n  isFetching: false,\n  error: null,\n  Promo: []\n};\nexport const getPromo = createAsyncThunk('Promo/getPromo', async (params, {\n  rejectWithValue\n}) => {\n  const response = await apiGetCall(`/Promo`, params);\n\n  if (response.data.status === 'error') {\n    return rejectWithValue(response.data);\n  }\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: {\n    // getPromo\n    [getPromo.pending]: (state, action) => {\n      state.isFetching = true;\n      state.error = null;\n      state.Promo = [];\n    },\n    [getPromo.rejected]: (state, action) => {\n      var _action$payload;\n\n      state.isFetching = false;\n      state.error = action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message;\n    },\n    [getPromo.fulfilled]: (state, action) => {\n      state.isFetching = false;\n      state.error = null;\n      state.Promo = action.payload.data;\n    }\n  }\n});\nexport const {\n  logout\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/react-admin-poc/src/store/PromoRedux.js"],"names":["createAsyncThunk","createSlice","apiPostCall","message","initialState","isFetching","error","Promo","getPromo","params","rejectWithValue","response","apiGetCall","data","status","counterSlice","name","reducers","logout","state","user","token","extraReducers","pending","action","rejected","payload","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,KADK;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,QAAQ,GAAGR,gBAAgB,CACpC,gBADoC,EAEpC,OAAOS,MAAP,EAAe;AAAEC,EAAAA;AAAF,CAAf,KAAuC;AACnC,QAAMC,QAAQ,GAAG,MAAMC,UAAU,CAAE,QAAF,EAAWH,MAAX,CAAjC;;AACA,MAAIE,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,OAA7B,EAAsC;AAClC,WAAOJ,eAAe,CAACC,QAAQ,CAACE,IAAV,CAAtB;AACH;;AACD,SAAOF,QAAQ,CAACE,IAAhB;AACH,CARmC,CAAjC;AAWP,OAAO,MAAME,YAAY,GAAGd,WAAW,CAAC;AACpCe,EAAAA,IAAI,EAAE,MAD8B;AAEpCZ,EAAAA,YAFoC;AAGpCa,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAGC,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACC,IAAN,GAAa,IAAb;AACAD,MAAAA,KAAK,CAACE,KAAN,GAAc,IAAd;AACH;AAJK,GAH0B;AASpCC,EAAAA,aAAa,EAAE;AACX;AACA,KAACd,QAAQ,CAACe,OAAV,GAAoB,CAACJ,KAAD,EAAQK,MAAR,KAAmB;AACnCL,MAAAA,KAAK,CAACd,UAAN,GAAmB,IAAnB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACAa,MAAAA,KAAK,CAACZ,KAAN,GAAc,EAAd;AACH,KANU;AAOX,KAACC,QAAQ,CAACiB,QAAV,GAAqB,CAACN,KAAD,EAAQK,MAAR,KAAmB;AAAA;;AACpCL,MAAAA,KAAK,CAACd,UAAN,GAAmB,KAAnB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAckB,MAAd,aAAcA,MAAd,0CAAcA,MAAM,CAAEE,OAAtB,oDAAc,gBAAiBvB,OAA/B;AACH,KAVU;AAWX,KAACK,QAAQ,CAACmB,SAAV,GAAsB,CAACR,KAAD,EAAQK,MAAR,KAAmB;AACrCL,MAAAA,KAAK,CAACd,UAAN,GAAmB,KAAnB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACAa,MAAAA,KAAK,CAACZ,KAAN,GAAciB,MAAM,CAACE,OAAP,CAAeb,IAA7B;AACH;AAfU;AATqB,CAAD,CAAhC;AA6BP,OAAO,MAAM;AAAEK,EAAAA;AAAF,IAAaH,YAAY,CAACa,OAAhC;AACP,eAAeb,YAAY,CAACc,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { apiPostCall } from '../utility/site-apis'\nimport { message } from 'antd';\n\nconst initialState = {\n    isFetching: false,\n    error: null,\n    Promo: [],\n}\n\nexport const getPromo = createAsyncThunk(\n    'Promo/getPromo',\n    async (params, { rejectWithValue }) => {\n        const response = await apiGetCall(`/Promo`, params)\n        if (response.data.status === 'error') {\n            return rejectWithValue(response.data)\n        }\n        return response.data\n    }\n)\n\nexport const counterSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        logout: (state) => {\n            state.user = null\n            state.token = null\n        },\n    },\n    extraReducers: {\n        // getPromo\n        [getPromo.pending]: (state, action) => {\n            state.isFetching = true\n            state.error = null\n            state.Promo = []\n        },\n        [getPromo.rejected]: (state, action) => {\n            state.isFetching = false\n            state.error = action?.payload?.message\n        },\n        [getPromo.fulfilled]: (state, action) => {\n            state.isFetching = false\n            state.error = null\n            state.Promo = action.payload.data\n        },\n    }\n\n})\n\nexport const { logout } = counterSlice.actions\nexport default counterSlice.reducer\n"]},"metadata":{},"sourceType":"module"}