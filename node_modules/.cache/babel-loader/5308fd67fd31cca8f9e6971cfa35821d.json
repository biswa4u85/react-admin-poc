{"ast":null,"code":"var _jsxFileName = \"/Users/sunita/Sites/Erptech/its-Disco/src/@crema/core/AppInfoView/InfoViewContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useReducer } from 'react';\nimport { contextReducer, InFoViewActions } from './InfoViewReducer';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextState = {\n  loading: false,\n  error: '',\n  displayMessage: ''\n};\nconst InfoViewContext = /*#__PURE__*/createContext();\nconst InfoViewActionsContext = /*#__PURE__*/createContext();\nexport const useInfoViewContext = () => {\n  _s();\n\n  return useContext(InfoViewContext);\n};\n\n_s(useInfoViewContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const useInfoViewActionsContext = () => {\n  _s2();\n\n  return useContext(InfoViewActionsContext);\n};\n\n_s2(useInfoViewActionsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst InfoViewContextProvider = props => {\n  _s3();\n\n  const [state, dispatch] = useReducer(contextReducer, ContextState, () => ContextState);\n  const fetchStart = useCallback(() => {\n    dispatch({\n      type: InFoViewActions.FETCH_STARTS\n    });\n  }, []);\n  const fetchSuccess = useCallback(() => {\n    dispatch({\n      type: InFoViewActions.FETCH_SUCCESS\n    });\n  }, []);\n\n  const fetchError = error => {\n    dispatch({\n      type: InFoViewActions.SET_ERROR,\n      payload: error\n    });\n  };\n\n  const showMessage = displayMessage => {\n    dispatch({\n      type: InFoViewActions.SET_MESSAGE,\n      payload: displayMessage\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(InfoViewContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(InfoViewActionsContext.Provider, {\n      value: {\n        fetchStart,\n        fetchSuccess,\n        fetchError,\n        showMessage\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(InfoViewContextProvider, \"zWsrOkl2nF6ycofcreAIRzEoTIw=\");\n\n_c = InfoViewContextProvider;\nexport default InfoViewContextProvider;\nInfoViewContextProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoViewContextProvider\");","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/its-Disco/src/@crema/core/AppInfoView/InfoViewContext.js"],"names":["React","createContext","useCallback","useContext","useReducer","contextReducer","InFoViewActions","PropTypes","ContextState","loading","error","displayMessage","InfoViewContext","InfoViewActionsContext","useInfoViewContext","useInfoViewActionsContext","InfoViewContextProvider","props","state","dispatch","fetchStart","type","FETCH_STARTS","fetchSuccess","FETCH_SUCCESS","fetchError","SET_ERROR","payload","showMessage","SET_MESSAGE","children","propTypes","node","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,WAA9B,EAA2CC,UAA3C,EAAuDC,UAAvD,QAAwE,OAAxE;AACA,SAAQC,cAAR,EAAwBC,eAAxB,QAA8C,mBAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,KAAK,EAAE,EAFmB;AAG1BC,EAAAA,cAAc,EAAE;AAHU,CAArB;AAMP,MAAMC,eAAe,gBAAGX,aAAa,EAArC;AACA,MAAMY,sBAAsB,gBAAGZ,aAAa,EAA5C;AAEA,OAAO,MAAMa,kBAAkB,GAAG;AAAA;;AAAA,SAAMX,UAAU,CAACS,eAAD,CAAhB;AAAA,CAA3B;;GAAME,kB;;AACb,OAAO,MAAMC,yBAAyB,GAAG;AAAA;;AAAA,SACvCZ,UAAU,CAACU,sBAAD,CAD6B;AAAA,CAAlC;;IAAME,yB;;AAGb,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAClCC,cADkC,EAElCG,YAFkC,EAGlC,MAAMA,YAH4B,CAApC;AAMA,QAAMY,UAAU,GAAGlB,WAAW,CAAC,MAAM;AACnCiB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEf,eAAe,CAACgB;AAAvB,KAAD,CAAR;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAIA,QAAMC,YAAY,GAAGrB,WAAW,CAAC,MAAM;AACrCiB,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEf,eAAe,CAACkB;AAAvB,KAAD,CAAR;AACD,GAF+B,EAE7B,EAF6B,CAAhC;;AAIA,QAAMC,UAAU,GAAIf,KAAD,IAAW;AAC5BS,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEf,eAAe,CAACoB,SAAvB;AAAkCC,MAAAA,OAAO,EAAEjB;AAA3C,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMkB,WAAW,GAAIjB,cAAD,IAAoB;AACtCQ,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEf,eAAe,CAACuB,WAAvB;AAAoCF,MAAAA,OAAO,EAAEhB;AAA7C,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEO,KAAjC;AAAA,2BACE,QAAC,sBAAD,CAAwB,QAAxB;AACE,MAAA,KAAK,EAAE;AAACE,QAAAA,UAAD;AAAaG,QAAAA,YAAb;AAA2BE,QAAAA,UAA3B;AAAuCG,QAAAA;AAAvC,OADT;AAAA,gBAEGX,KAAK,CAACa;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA/BD;;IAAMd,uB;;KAAAA,uB;AAiCN,eAAeA,uBAAf;AAEAA,uBAAuB,CAACe,SAAxB,GAAoC;AAClCD,EAAAA,QAAQ,EAAEvB,SAAS,CAACyB,IAAV,CAAeC;AADS,CAApC","sourcesContent":["import React, {createContext, useCallback, useContext, useReducer} from 'react';\r\nimport {contextReducer, InFoViewActions} from './InfoViewReducer';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ContextState = {\r\n  loading: false,\r\n  error: '',\r\n  displayMessage: '',\r\n};\r\n\r\nconst InfoViewContext = createContext();\r\nconst InfoViewActionsContext = createContext();\r\n\r\nexport const useInfoViewContext = () => useContext(InfoViewContext);\r\nexport const useInfoViewActionsContext = () =>\r\n  useContext(InfoViewActionsContext);\r\n\r\nconst InfoViewContextProvider = (props) => {\r\n  const [state, dispatch] = useReducer(\r\n    contextReducer,\r\n    ContextState,\r\n    () => ContextState,\r\n  );\r\n\r\n  const fetchStart = useCallback(() => {\r\n    dispatch({type: InFoViewActions.FETCH_STARTS});\r\n  }, []);\r\n\r\n  const fetchSuccess = useCallback(() => {\r\n    dispatch({type: InFoViewActions.FETCH_SUCCESS});\r\n  }, []);\r\n\r\n  const fetchError = (error) => {\r\n    dispatch({type: InFoViewActions.SET_ERROR, payload: error});\r\n  };\r\n\r\n  const showMessage = (displayMessage) => {\r\n    dispatch({type: InFoViewActions.SET_MESSAGE, payload: displayMessage});\r\n  };\r\n\r\n  return (\r\n    <InfoViewContext.Provider value={state}>\r\n      <InfoViewActionsContext.Provider\r\n        value={{fetchStart, fetchSuccess, fetchError, showMessage}}>\r\n        {props.children}\r\n      </InfoViewActionsContext.Provider>\r\n    </InfoViewContext.Provider>\r\n  );\r\n};\r\n\r\nexport default InfoViewContextProvider;\r\n\r\nInfoViewContextProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}