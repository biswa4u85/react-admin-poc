{"ast":null,"code":"var _jsxFileName = \"/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/core/AppThemeSetting/SidebarSettings/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { sidebarBgImages, sidebarColors } from '../../../services/db/navigationStyle';\nimport { useSidebarActionsContext, useSidebarContext } from '../../../utility/AppContextProvider/SidebarContextProvider';\nimport NavMenuStyle from './NavMenuStyle';\nimport AppGrid from '../../AppGrid';\nimport IntlMessages from '../../../utility/IntlMessages';\nimport { CheckOutlined } from '@ant-design/icons';\nimport { Switch } from 'antd';\nimport MenuColorCell from './MenuColorCell';\nimport './index.style.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SidebarSettings = () => {\n  _s();\n\n  const {\n    sidebarBgImage,\n    isSidebarBgImage\n  } = useSidebarContext();\n  const {\n    updateSidebarBgImage,\n    setSidebarBgImage\n  } = useSidebarActionsContext();\n\n  const onToggleSidebarImage = () => {\n    setSidebarBgImage(!isSidebarBgImage);\n  };\n\n  const onUpdateSidebarBgImage = image => {\n    updateSidebarBgImage(image);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar-setting\",\n    children: [/*#__PURE__*/_jsxDEV(NavMenuStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"customize-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customize-switch-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: /*#__PURE__*/_jsxDEV(IntlMessages, {\n            id: \"customizer.sidebarImage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          className: \"customize-switch\",\n          checked: isSidebarBgImage,\n          onChange: onToggleSidebarImage,\n          value: \"checkedA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), isSidebarBgImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customize-nav-option\",\n        style: {\n          marginTop: 20\n        },\n        children: sidebarBgImages.map(imagesObj => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"customize-nav-option-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"customize-nav-option-content\",\n              onClick: () => onUpdateSidebarBgImage(imagesObj.id),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: imagesObj.image,\n                alt: \"nav\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 21\n              }, this), sidebarBgImage === imagesObj.id ? /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"customize-nav-option-right-icon\",\n                children: /*#__PURE__*/_jsxDEV(CheckOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 23\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)\n          }, imagesObj.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"customize-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Sidebar Colors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppGrid, {\n        data: sidebarColors,\n        column: 2,\n        itemPadding: 5,\n        renderItem: (colorSet, index) => /*#__PURE__*/_jsxDEV(MenuColorCell, {\n          sidebarColors: colorSet\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SidebarSettings, \"/YLM4/VRDscqUMUhhA871ivqXAY=\", false, function () {\n  return [useSidebarContext, useSidebarActionsContext];\n});\n\n_c = SidebarSettings;\nexport default SidebarSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"SidebarSettings\");","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/core/AppThemeSetting/SidebarSettings/index.js"],"names":["React","sidebarBgImages","sidebarColors","useSidebarActionsContext","useSidebarContext","NavMenuStyle","AppGrid","IntlMessages","CheckOutlined","Switch","MenuColorCell","SidebarSettings","sidebarBgImage","isSidebarBgImage","updateSidebarBgImage","setSidebarBgImage","onToggleSidebarImage","onUpdateSidebarBgImage","image","marginTop","map","imagesObj","id","colorSet","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  sidebarBgImages,\r\n  sidebarColors,\r\n} from '../../../services/db/navigationStyle';\r\nimport {\r\n  useSidebarActionsContext,\r\n  useSidebarContext,\r\n} from '../../../utility/AppContextProvider/SidebarContextProvider';\r\nimport NavMenuStyle from './NavMenuStyle';\r\nimport AppGrid from '../../AppGrid';\r\nimport IntlMessages from '../../../utility/IntlMessages';\r\nimport {CheckOutlined} from '@ant-design/icons';\r\nimport {Switch} from 'antd';\r\nimport MenuColorCell from './MenuColorCell';\r\nimport './index.style.less';\r\n\r\nconst SidebarSettings = () => {\r\n  const {sidebarBgImage, isSidebarBgImage} = useSidebarContext();\r\n\r\n  const {updateSidebarBgImage, setSidebarBgImage} = useSidebarActionsContext();\r\n\r\n  const onToggleSidebarImage = () => {\r\n    setSidebarBgImage(!isSidebarBgImage);\r\n  };\r\n  const onUpdateSidebarBgImage = (image) => {\r\n    updateSidebarBgImage(image);\r\n  };\r\n\r\n  return (\r\n    <div className='sidebar-setting'>\r\n      <NavMenuStyle />\r\n      <div className='customize-item'>\r\n        <div className='customize-switch-view'>\r\n          <h4>\r\n            <IntlMessages id='customizer.sidebarImage' />\r\n          </h4>\r\n          <Switch\r\n            className='customize-switch'\r\n            checked={isSidebarBgImage}\r\n            onChange={onToggleSidebarImage}\r\n            value='checkedA'\r\n          />\r\n        </div>\r\n\r\n        {isSidebarBgImage ? (\r\n          <div className='customize-nav-option' style={{marginTop: 20}}>\r\n            {sidebarBgImages.map((imagesObj) => {\r\n              return (\r\n                <div className='customize-nav-option-item' key={imagesObj.id}>\r\n                  <div\r\n                    className='customize-nav-option-content'\r\n                    onClick={() => onUpdateSidebarBgImage(imagesObj.id)}>\r\n                    <img src={imagesObj.image} alt='nav' />\r\n                    {sidebarBgImage === imagesObj.id ? (\r\n                      <span className='customize-nav-option-right-icon'>\r\n                        <CheckOutlined />\r\n                      </span>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n\r\n      <div className='customize-item'>\r\n        <h4>Sidebar Colors</h4>\r\n        <AppGrid\r\n          data={sidebarColors}\r\n          column={2}\r\n          itemPadding={5}\r\n          renderItem={(colorSet, index) => (\r\n            <MenuColorCell key={index} sidebarColors={colorSet} />\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarSettings;\r\n"]},"metadata":{},"sourceType":"module"}