{"ast":null,"code":"var _jsxFileName = \"/Users/mamata/Sites/Erptech/react-admin-poc/src/pages/common/StandardTable/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Alert } from 'antd';\nimport styles from './index.less';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction initTotalList(columns) {\n  const totalList = [];\n  columns.forEach(column => {\n    if (column.needTotal) {\n      totalList.push({ ...column,\n        total: 0\n      });\n    }\n  });\n  return totalList;\n}\n\nconst StandardTable = props => {\n  _s();\n\n  const {\n    columns,\n    onSelectRow,\n    onChange\n  } = props;\n  const {\n    selectedRows,\n    data = {},\n    pageOnChange,\n    rowKey,\n    ...rest\n  } = props;\n  const {\n    list = [],\n    pagination,\n    count\n  } = data;\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [needTotalList, setNeedTotalList] = useState(initTotalList(columns));\n  const [current, setCurrent] = useState(1);\n\n  const handleRowSelectChange = (selectedRowKeys, selectedRows) => {\n    let newNeedTotalList = needTotalList.map(item => ({ ...item,\n      total: selectedRows.reduce((sum, val) => sum + parseFloat(val[item.dataIndex], 10), 0)\n    }));\n\n    if (onSelectRow) {\n      onSelectRow(selectedRows);\n    }\n\n    setSelectedRowKeys(selectedRowKeys);\n    setNeedTotalList(newNeedTotalList);\n  };\n\n  const handleTableChange = (pagination, filters, sorter) => {\n    if (onChange) {\n      onChange(pagination, filters, sorter);\n    }\n  };\n\n  const cleanSelectedKeys = () => {\n    handleRowSelectChange([], []);\n  };\n\n  const paginationProps = {\n    showSizeChanger: false,\n    showQuickJumper: true,\n    current,\n    onChange: (page, pageSize) => {\n      pageOnChange(page, pageSize);\n      setCurrent(page);\n    },\n    ...pagination,\n    total: count\n  };\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: handleRowSelectChange,\n    getCheckboxProps: record => ({\n      disabled: record.disabled\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.standardTable,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableAlert,\n      children: selectedRows && /*#__PURE__*/_jsxDEV(Alert, {\n        message: /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [\"Choose \", /*#__PURE__*/_jsxDEV(\"a\", {\n            style: {\n              fontWeight: 600\n            },\n            children: selectedRowKeys.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 22\n          }, this), \" Item\\xA0\\xA0\", needTotalList.map(item => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: 8\n            },\n            children: [item.title, \"\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: 600\n              },\n              children: item.render ? item.render(item.total) : item.total\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)]\n          }, item.dataIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"a\", {\n            onClick: cleanSelectedKeys,\n            style: {\n              marginLeft: 24\n            },\n            children: \"Empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this),\n        type: \"info\",\n        showIcon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      rowKey: rowKey || 'key',\n      locale: {\n        emptyText: 'No results found'\n      },\n      rowSelection: selectedRows === false ? false : rowSelection,\n      dataSource: list,\n      pagination: paginationProps,\n      onChange: handleTableChange,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StandardTable, \"wiRdVBXeKhnaofJN4UltYfSC9S0=\");\n\n_c = StandardTable;\nexport default StandardTable;\nStandardTable.defaultProps = {\n  columns: [],\n  data: {}\n};\nStandardTable.propTypes = {\n  onSelectRow: PropTypes.func,\n  onChange: PropTypes.node,\n  selectedRows: PropTypes.node,\n  pageOnChange: PropTypes.func,\n  columns: PropTypes.array,\n  data: PropTypes.object,\n  rowKey: PropTypes.node,\n  maxHeight: PropTypes.number,\n  className: PropTypes.string,\n  size: PropTypes.number\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"StandardTable\");","map":{"version":3,"sources":["/Users/mamata/Sites/Erptech/react-admin-poc/src/pages/common/StandardTable/index.js"],"names":["React","Fragment","useState","PropTypes","Table","Alert","styles","initTotalList","columns","totalList","forEach","column","needTotal","push","total","StandardTable","props","onSelectRow","onChange","selectedRows","data","pageOnChange","rowKey","rest","list","pagination","count","selectedRowKeys","setSelectedRowKeys","needTotalList","setNeedTotalList","current","setCurrent","handleRowSelectChange","newNeedTotalList","map","item","reduce","sum","val","parseFloat","dataIndex","handleTableChange","filters","sorter","cleanSelectedKeys","paginationProps","showSizeChanger","showQuickJumper","page","pageSize","rowSelection","getCheckboxProps","record","disabled","standardTable","tableAlert","fontWeight","length","marginLeft","title","render","emptyText","defaultProps","propTypes","func","node","array","object","maxHeight","number","className","string","size"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Alert } from 'antd';\nimport styles from './index.less';\n\nfunction initTotalList(columns) {\n  const totalList = [];\n  columns.forEach(column => {\n    if (column.needTotal) {\n      totalList.push({ ...column, total: 0 });\n    }\n  });\n  return totalList;\n}\n\nconst StandardTable = (props) => {\n  const { columns, onSelectRow, onChange } = props;\n  const { selectedRows, data = {}, pageOnChange, rowKey, ...rest } = props;\n  const { list = [], pagination, count } = data;\n\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [needTotalList, setNeedTotalList] = useState(initTotalList(columns));\n  const [current, setCurrent] = useState(1);\n\n\n  const handleRowSelectChange = (selectedRowKeys, selectedRows) => {\n    let newNeedTotalList = needTotalList.map(item => ({\n      ...item,\n      total: selectedRows.reduce((sum, val) => sum + parseFloat(val[item.dataIndex], 10), 0),\n    }));\n    if (onSelectRow) {\n      onSelectRow(selectedRows);\n    }\n    setSelectedRowKeys(selectedRowKeys)\n    setNeedTotalList(newNeedTotalList)\n  };\n\n  const handleTableChange = (pagination, filters, sorter) => {\n    if (onChange) {\n      onChange(pagination, filters, sorter);\n    }\n  };\n\n  const cleanSelectedKeys = () => {\n    handleRowSelectChange([], []);\n  };\n\n  const paginationProps = {\n    showSizeChanger: false,\n    showQuickJumper: true,\n    current,\n    onChange: (page, pageSize) => {\n      pageOnChange(page, pageSize)\n      setCurrent(page)\n    },\n    ...pagination,\n    total: count,\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: handleRowSelectChange,\n    getCheckboxProps: record => ({\n      disabled: record.disabled,\n    }),\n  };\n\n  return (\n    <div className={styles.standardTable}>\n      <div className={styles.tableAlert}>\n        {selectedRows && (<Alert\n          message={\n            <Fragment>\n              Choose <a style={{ fontWeight: 600 }}>{selectedRowKeys.length}</a> Item&nbsp;&nbsp;\n              {needTotalList.map(item => (\n                <span style={{ marginLeft: 8 }} key={item.dataIndex}>\n                  {item.title}\n                  &nbsp;\n                  <span style={{ fontWeight: 600 }}>\n                    {item.render ? item.render(item.total) : item.total}\n                  </span>\n                </span>\n              ))}\n              <a onClick={cleanSelectedKeys} style={{ marginLeft: 24 }}>\n                Empty\n              </a>\n            </Fragment>\n          }\n          type=\"info\"\n          showIcon\n        />)}\n      </div>\n      <Table\n        rowKey={rowKey || 'key'}\n        locale={{ emptyText: 'No results found' }}\n        rowSelection={selectedRows === false ? false : rowSelection}\n        dataSource={list}\n        pagination={paginationProps}\n        onChange={handleTableChange}\n        {...rest}\n      />\n    </div>\n  );\n}\n\nexport default StandardTable;\n\nStandardTable.defaultProps = {\n  columns: [],\n  data: {},\n};\n\nStandardTable.propTypes = {\n  onSelectRow: PropTypes.func,\n  onChange: PropTypes.node,\n  selectedRows: PropTypes.node,\n  pageOnChange: PropTypes.func,\n  columns: PropTypes.array,\n  data: PropTypes.object,\n  rowKey: PropTypes.node,\n  maxHeight: PropTypes.number,\n  className: PropTypes.string,\n  size: PropTypes.number,\n};\n"]},"metadata":{},"sourceType":"module"}