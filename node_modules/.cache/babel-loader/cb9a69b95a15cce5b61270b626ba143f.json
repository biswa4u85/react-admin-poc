{"ast":null,"code":"// ForJWT Auth\n\n/*import { getUserFromJwtAuth } from \"./helper/AuthHelper\";\r\nimport {\r\n  useJWTAuth,\r\n  useJWTAuthActions,\r\n} from \"../services/auth/jwt-auth/JWTAuthProvider\";\r\n\r\nexport const useAuthUser = () => {\r\n  const { user, isAuthenticated, isLoading } = useJWTAuth();\r\n  return {\r\n    isLoading,\r\n    isAuthenticated,\r\n    user: getUserFromJwtAuth(user),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  const { signInUser, signUpUser, logout } = useJWTAuthActions();\r\n\r\n  return {\r\n    signInUser,\r\n    logout,\r\n    signUpUser,\r\n  };\r\n};*/\n// //For Firebase Auth\n// import {\n//   useFirebase,\n//   useFirebaseActions,\n// } from '../services/auth/firebase/FirebaseAuthProvider';\n// import {getUserFromFirebase} from './helper/AuthHelper';\nexport const useAuthUser = () => {\n  // const {user, isAuthenticated, isLoading} = useFirebase();\n  return {// isLoading,\n    // isAuthenticated,\n    // user: getUserFromFirebase(user),\n  };\n};\nexport const useAuthMethod = () => {\n  // const {\n  //   signInWithEmailAndPassword,\n  //   createUserWithEmailAndPassword,\n  //   signInWithPopup,\n  //   logout,\n  // } = useFirebaseActions();\n  return {// signInWithEmailAndPassword,\n    // createUserWithEmailAndPassword,\n    // signInWithPopup,\n    // logout,\n  };\n};\n/*\r\n// For AWS Auth\r\nimport {getUserFromAWS} from './helper/AuthHelper';\r\nimport {\r\n  useAwsCognito,\r\n  useAwsCognitoActions,\r\n} from '../services/auth/aws-cognito/AWSAuthProvider';\r\n\r\nexport const useAuthUser = () => {\r\n  const {user, isAuthenticated, isLoading} = useAwsCognito();\r\n  return {\r\n    isLoading,\r\n    isAuthenticated,\r\n    user: getUserFromAWS(user),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  const {\r\n    signIn,\r\n    signUpCognitoUser,\r\n    confirmCognitoUserSignup,\r\n    logout,\r\n  } = useAwsCognitoActions();\r\n\r\n  return {\r\n    signIn,\r\n    signUpCognitoUser,\r\n    confirmCognitoUserSignup,\r\n    logout,\r\n  };\r\n};*/\n\n/*\r\n\r\n//For Auth0\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { useMemo } from \"react\";\r\nimport { getUserFromAuth0 } from \"./helper/AuthHelper\";\r\n\r\nexport const useAuthUser = () => {\r\n  const { user, isAuthenticated, isLoading } = useAuth0();\r\n  return {\r\n    isLoading,\r\n    isAuthenticated,\r\n    user: useMemo(() => getUserFromAuth0(user), []),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  const { loginWithRedirect, logout } = useAuth0();\r\n  return { loginWithRedirect, logout };\r\n};\r\n*/","map":{"version":3,"sources":["/Users/mamata/Sites/Erptech/react-admin-poc/src/@crema/utility/AuthHooks.js"],"names":["useAuthUser","useAuthMethod"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,WAAW,GAAG,MAAM;AAC/B;AACA,SAAO,CACL;AACA;AACA;AAHK,GAAP;AAKD,CAPM;AASP,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AAEA,SAAO,CACL;AACA;AACA;AACA;AAJK,GAAP;AAMD,CAdM;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// ForJWT Auth\r\n/*import { getUserFromJwtAuth } from \"./helper/AuthHelper\";\r\nimport {\r\n  useJWTAuth,\r\n  useJWTAuthActions,\r\n} from \"../services/auth/jwt-auth/JWTAuthProvider\";\r\n\r\nexport const useAuthUser = () => {\r\n  const { user, isAuthenticated, isLoading } = useJWTAuth();\r\n  return {\r\n    isLoading,\r\n    isAuthenticated,\r\n    user: getUserFromJwtAuth(user),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  const { signInUser, signUpUser, logout } = useJWTAuthActions();\r\n\r\n  return {\r\n    signInUser,\r\n    logout,\r\n    signUpUser,\r\n  };\r\n};*/\r\n// //For Firebase Auth\r\n// import {\r\n//   useFirebase,\r\n//   useFirebaseActions,\r\n// } from '../services/auth/firebase/FirebaseAuthProvider';\r\n// import {getUserFromFirebase} from './helper/AuthHelper';\r\n\r\nexport const useAuthUser = () => {\r\n  // const {user, isAuthenticated, isLoading} = useFirebase();\r\n  return {\r\n    // isLoading,\r\n    // isAuthenticated,\r\n    // user: getUserFromFirebase(user),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  // const {\r\n  //   signInWithEmailAndPassword,\r\n  //   createUserWithEmailAndPassword,\r\n  //   signInWithPopup,\r\n  //   logout,\r\n  // } = useFirebaseActions();\r\n\r\n  return {\r\n    // signInWithEmailAndPassword,\r\n    // createUserWithEmailAndPassword,\r\n    // signInWithPopup,\r\n    // logout,\r\n  };\r\n};\r\n\r\n/*\r\n// For AWS Auth\r\nimport {getUserFromAWS} from './helper/AuthHelper';\r\nimport {\r\n  useAwsCognito,\r\n  useAwsCognitoActions,\r\n} from '../services/auth/aws-cognito/AWSAuthProvider';\r\n\r\nexport const useAuthUser = () => {\r\n  const {user, isAuthenticated, isLoading} = useAwsCognito();\r\n  return {\r\n    isLoading,\r\n    isAuthenticated,\r\n    user: getUserFromAWS(user),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  const {\r\n    signIn,\r\n    signUpCognitoUser,\r\n    confirmCognitoUserSignup,\r\n    logout,\r\n  } = useAwsCognitoActions();\r\n\r\n  return {\r\n    signIn,\r\n    signUpCognitoUser,\r\n    confirmCognitoUserSignup,\r\n    logout,\r\n  };\r\n};*/\r\n/*\r\n\r\n//For Auth0\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { useMemo } from \"react\";\r\nimport { getUserFromAuth0 } from \"./helper/AuthHelper\";\r\n\r\nexport const useAuthUser = () => {\r\n  const { user, isAuthenticated, isLoading } = useAuth0();\r\n  return {\r\n    isLoading,\r\n    isAuthenticated,\r\n    user: useMemo(() => getUserFromAuth0(user), []),\r\n  };\r\n};\r\n\r\nexport const useAuthMethod = () => {\r\n  const { loginWithRedirect, logout } = useAuth0();\r\n  return { loginWithRedirect, logout };\r\n};\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}