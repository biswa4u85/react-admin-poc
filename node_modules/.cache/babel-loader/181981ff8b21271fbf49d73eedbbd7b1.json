{"ast":null,"code":"var _jsxFileName = \"/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/utility/AuthRoutes.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { AppLoader } from '../index';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AuthRoutes = ({\n  children\n}) => {\n  _s();\n\n  const isFetching = useSelector(state => state.auth.isFetching);\n  return isFetching ? /*#__PURE__*/_jsxDEV(AppLoader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 23\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(AuthRoutes, \"EWfGxLGk6vKbEvoeNKHSzkRBjvI=\", false, function () {\n  return [useSelector];\n});\n\n_c = AuthRoutes;\nexport default AuthRoutes;\nAuthRoutes.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRoutes\");","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/utility/AuthRoutes.js"],"names":["React","AppLoader","PropTypes","useSelector","AuthRoutes","children","isFetching","state","auth","propTypes","node","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnC,QAAMC,UAAU,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,UAAvB,CAA9B;AACA,SAAOA,UAAU,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBAAmB;AAAA,cAAGD;AAAH,mBAApC;AACD,CAHD;;GAAMD,U;UACeD,W;;;KADfC,U;AAKN,eAAeA,UAAf;AAEAA,UAAU,CAACK,SAAX,GAAuB;AACrBJ,EAAAA,QAAQ,EAAEH,SAAS,CAACQ,IAAV,CAAeC;AADJ,CAAvB","sourcesContent":["import React from 'react';\r\nimport { AppLoader } from '../index';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst AuthRoutes = ({ children }) => {\r\n  const isFetching = useSelector((state) => state.auth.isFetching)\r\n  return isFetching ? <AppLoader /> : <>{children}</>;\r\n};\r\n\r\nexport default AuthRoutes;\r\n\r\nAuthRoutes.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}