{"ast":null,"code":"import React from 'react'; // import { message } from 'antd';\n// import { AppLoader } from '../../../@crema';\n// import { useSelector} from 'react-redux';\n// import {hideMessage} from '../../../redux/actions';\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppInfoView = () => {\n  // const {loading, error, displayMessage} = useSelector(({common}) => common);\n  // const dispatch = useDispatch();\n  // useEffect(() => {\n  //   if (error) {\n  //     message.error(error);\n  //     dispatch(hideMessage());\n  //   }\n  // }, [error]);\n  // useEffect(() => {\n  //   if (displayMessage) {\n  //     message.success(displayMessage);\n  //     dispatch(hideMessage());\n  //   }\n  // }, [displayMessage]);\n  // return <>{loading ? <AppLoader /> : null}</>;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: null\n  }, void 0, false);\n};\n\n_c = AppInfoView;\nexport default AppInfoView;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppInfoView\");","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/react-admin-poc/src/@crema/core/AppInfoView/index.js"],"names":["React","AppInfoView"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,sBAAO;AAAA,cAAG;AAAH,mBAAP;AACD,CApBD;;KAAMA,W;AAsBN,eAAeA,WAAf","sourcesContent":["import React from 'react';\r\n// import { message } from 'antd';\r\n// import { AppLoader } from '../../../@crema';\r\n// import { useSelector} from 'react-redux';\r\n// import {hideMessage} from '../../../redux/actions';\r\n\r\nconst AppInfoView = () => {\r\n  // const {loading, error, displayMessage} = useSelector(({common}) => common);\r\n  // const dispatch = useDispatch();\r\n\r\n  // useEffect(() => {\r\n  //   if (error) {\r\n  //     message.error(error);\r\n  //     dispatch(hideMessage());\r\n  //   }\r\n  // }, [error]);\r\n\r\n  // useEffect(() => {\r\n  //   if (displayMessage) {\r\n  //     message.success(displayMessage);\r\n  //     dispatch(hideMessage());\r\n  //   }\r\n  // }, [displayMessage]);\r\n\r\n  // return <>{loading ? <AppLoader /> : null}</>;\r\n  return <>{null}</>;\r\n};\r\n\r\nexport default AppInfoView;\r\n"]},"metadata":{},"sourceType":"module"}