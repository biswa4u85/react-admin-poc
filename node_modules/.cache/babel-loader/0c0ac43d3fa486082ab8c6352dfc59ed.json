{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { apiPostCall } from '../utility/site-apis';\nimport { message } from 'antd';\nconst initialState = {\n  isFetching: false,\n  error: null,\n  user: null,\n  token: null\n};\nexport const adminLogin = createAsyncThunk('auth/adminLogin', async (params, {\n  rejectWithValue\n}) => {\n  const response = await apiPostCall(`/auth/login`, params);\n\n  if (response.data.status === 'error') {\n    return rejectWithValue(response.data);\n  }\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: {\n    // adminLogin\n    [adminLogin.pending]: state => {\n      state.isFetching = true;\n      state.error = null;\n    },\n    [adminLogin.rejected]: (state, action) => {\n      var _action$payload, _action$payload2;\n\n      message.error(action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message);\n      state.isFetching = false;\n      state.error = action === null || action === void 0 ? void 0 : (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message;\n    },\n    [adminLogin.fulfilled]: (state, action) => {\n      var _action$payload3, _action$payload3$data, _action$payload4;\n\n      state.isFetching = false;\n      state.error = null;\n      state.token = action === null || action === void 0 ? void 0 : (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : (_action$payload3$data = _action$payload3.data) === null || _action$payload3$data === void 0 ? void 0 : _action$payload3$data.Authorization;\n      state.user = action === null || action === void 0 ? void 0 : (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.data;\n    }\n  }\n});\nexport const {\n  logout\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/sunita/Sites/Erptech/react-admin-poc/src/store/AuthRedux.js"],"names":["createAsyncThunk","createSlice","apiPostCall","message","initialState","isFetching","error","user","token","adminLogin","params","rejectWithValue","response","data","status","counterSlice","name","reducers","logout","state","extraReducers","pending","rejected","action","payload","fulfilled","Authorization","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,CACxC,iBADwC,EAExC,OAAOU,MAAP,EAAe;AAAEC,EAAAA;AAAF,CAAf,KAAuC;AACrC,QAAMC,QAAQ,GAAG,MAAMV,WAAW,CAAE,aAAF,EAAgBQ,MAAhB,CAAlC;;AACA,MAAIE,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,OAA7B,EAAsC;AACpC,WAAOH,eAAe,CAACC,QAAQ,CAACC,IAAV,CAAtB;AACD;;AACD,SAAOD,QAAQ,CAACC,IAAhB;AACD,CARuC,CAAnC;AAWP,OAAO,MAAME,YAAY,GAAGd,WAAW,CAAC;AACtCe,EAAAA,IAAI,EAAE,MADgC;AAEtCZ,EAAAA,YAFsC;AAGtCa,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAGC,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACZ,IAAN,GAAa,IAAb;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAc,IAAd;AACD;AAJO,GAH4B;AAStCY,EAAAA,aAAa,EAAE;AACb;AACA,KAACX,UAAU,CAACY,OAAZ,GAAuBF,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACd,UAAN,GAAmB,IAAnB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACD,KALY;AAMb,KAACG,UAAU,CAACa,QAAZ,GAAuB,CAACH,KAAD,EAAQI,MAAR,KAAmB;AAAA;;AACxCpB,MAAAA,OAAO,CAACG,KAAR,CAAciB,MAAd,aAAcA,MAAd,0CAAcA,MAAM,CAAEC,OAAtB,oDAAc,gBAAiBrB,OAA/B;AACAgB,MAAAA,KAAK,CAACd,UAAN,GAAmB,KAAnB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAciB,MAAd,aAAcA,MAAd,2CAAcA,MAAM,CAAEC,OAAtB,qDAAc,iBAAiBrB,OAA/B;AACD,KAVY;AAWb,KAACM,UAAU,CAACgB,SAAZ,GAAwB,CAACN,KAAD,EAAQI,MAAR,KAAmB;AAAA;;AACzCJ,MAAAA,KAAK,CAACd,UAAN,GAAmB,KAAnB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACAa,MAAAA,KAAK,CAACX,KAAN,GAAce,MAAd,aAAcA,MAAd,2CAAcA,MAAM,CAAEC,OAAtB,8EAAc,iBAAiBX,IAA/B,0DAAc,sBAAuBa,aAArC;AACAP,MAAAA,KAAK,CAACZ,IAAN,GAAagB,MAAb,aAAaA,MAAb,2CAAaA,MAAM,CAAEC,OAArB,qDAAa,iBAAiBX,IAA9B;AACD;AAhBY;AATuB,CAAD,CAAhC;AA8BP,OAAO,MAAM;AAAEK,EAAAA;AAAF,IAAaH,YAAY,CAACY,OAAhC;AACP,eAAeZ,YAAY,CAACa,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { apiPostCall } from '../utility/site-apis'\nimport { message } from 'antd';\n\nconst initialState = {\n  isFetching: false,\n  error: null,\n  user: null,\n  token: null,\n}\n\nexport const adminLogin = createAsyncThunk(\n  'auth/adminLogin',\n  async (params, { rejectWithValue }) => {\n    const response = await apiPostCall(`/auth/login`, params)\n    if (response.data.status === 'error') {\n      return rejectWithValue(response.data)\n    }\n    return response.data\n  }\n)\n\nexport const counterSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      state.user = null\n      state.token = null\n    },\n  },\n  extraReducers: {\n    // adminLogin\n    [adminLogin.pending]: (state) => {\n      state.isFetching = true\n      state.error = null\n    },\n    [adminLogin.rejected]: (state, action) => {\n      message.error(action?.payload?.message);\n      state.isFetching = false\n      state.error = action?.payload?.message\n    },\n    [adminLogin.fulfilled]: (state, action) => {\n      state.isFetching = false\n      state.error = null\n      state.token = action?.payload?.data?.Authorization\n      state.user = action?.payload?.data\n    },\n  }\n\n})\n\nexport const { logout } = counterSlice.actions\nexport default counterSlice.reducer\n"]},"metadata":{},"sourceType":"module"}